{
    "root": {
        "data": {
            "id": "d60bnopxpq00",
            "created": 1733051988985,
            "text": "数据结构与算法",
            "note": "参考：\n数据结构与算法分析-java语言描述\n作者：Mark Allen Weiss"
        },
        "children": [
            {
                "data": {
                    "id": "d60bo5qn9i00",
                    "created": 1733052026033,
                    "text": "树"
                },
                "children": [
                    {
                        "data": {
                            "id": "d60bod3iesg0",
                            "created": 1733052042049,
                            "text": "遍历"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "d60bof0phx40",
                                    "created": 1733052046233,
                                    "text": "前序遍历"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "d60boialz9k0",
                                    "created": 1733052053362,
                                    "text": "中序遍历"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "d60bokea1340",
                                    "created": 1733052057937,
                                    "text": "后序遍历"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "d60bqro52nc0",
                            "created": 1733052230499,
                            "text": "二叉树"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "d60bxcmn6jc0",
                                    "created": 1733052746306,
                                    "text": "表达式树",
                                    "note": "1. 理解构建表达式树的方法\n\n3种表达式:\n前缀表达式：由树的前序遍历生成的结果\n中缀表达式：由树的中序遍历生成的结果\n后缀表达式：由树的后序遍历生成的结果"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "d60c5iqx8mo0",
                                    "created": 1733053386539,
                                    "text": "二叉查找树",
                                    "note": "定义：对于节点X，它的所有左子树的值均小于X，它的所有右子树的值均大于X。\n\nQ: 有相等值怎么办？\n\n二叉查找树平均深度：O(logN)\n\n二叉查找树要求所有项都可以排序，故而二叉查找树的项要实现比较功能或使用函数对象"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "d60e84yqbhk0",
                                            "created": 1733059233849,
                                            "text": "实现"
                                        },
                                        "children": [
                                            {
                                                "data": {
                                                    "id": "d60e870pci00",
                                                    "created": 1733059238321,
                                                    "text": "contains",
                                                    "note": "contains方法用于判断存在，若树T含有项X，则返回true，否则返回false；\n若T为空则返回false\n若根节点为X则返回true\n其余情况对左右子树作一次递归调用\n因二叉查找树的平均深度为O(logN),所以递归调用时最大栈深为O(logN)"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "d60ebv4k2lc0",
                                                    "created": 1733059525890,
                                                    "text": "finMin findMax",
                                                    "note": "查找最大最小值，即查找树的最左和最右节点，注意空值判断"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "d60ed5wxfrs0",
                                                    "created": 1733059627737,
                                                    "text": "insert",
                                                    "note": "插入若遇重复值，可不作处理或在该节点增加次数标记；\n增加标记的好处：减少树深，删除时相应减标记值，不移除节点，下次再有该重复值，不用重新分配节点\n\n\n重复值处理方法：\n1. 节点增加出现次数标记值\n2. 新增数据结构维护重复值，如表或新的查找树"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "d60eh38r9k80",
                                                    "created": 1733059935379,
                                                    "text": "remove",
                                                    "note": "1. 删除项没有子节点，直接移除\n2. 删除项有1个子节点，变更父节点的指向后删除节点\n3. 有2个节点：使用左子树最大值或右子树最小值覆盖删除节点\n\n\n若删除次数不多，通常使用惰性删除：\n当一个节点删除时，节点仍保留在树中，标记为删除。有重复值时很常用，一次删除标记-1。好处是下次再插入时不用重新分配节点"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "d60ekx60crc0",
                                                    "created": 1733060235609,
                                                    "text": "平均情况",
                                                    "note": "平均情况下任意节点的预期深度为O(logN)。推导参考4.3.5\n上述推导不完全正确，原因在删除操作，若删除时每次都取右子节点最小值覆盖删除节点，那么会导致左右子树失衡，降低查找树的效率。\n解决方法：\n1. 删除时随机选取左子树最大值和右子树最小值覆盖删除节点，降低失衡概率\n2.实现平衡算法（如AVL树）\n3. 放弃平衡条件，允许任意深度，但每次操作后要使用一个规则进行调整（自调整 self-adjusting），以提高后面的操作效率，这种数据结构称作伸展树（splay tree）"
                                                },
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "data": {
                                            "id": "d60euvq4ziw0",
                                            "created": 1733061016114,
                                            "text": "AVL树"
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "d60c5bvic7c0",
                            "created": 1733053371579,
                            "text": "topic"
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "default",
    "theme": "fresh-blue",
    "version": "1.4.43"
}